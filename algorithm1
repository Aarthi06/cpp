//
//  main.cpp
//  Algorithm_Numeric
//
//  Created by Bharanidharan on 13/07/24.
//

#include <iostream>
#include <vector>
#include <numeric>
#include <iterator>
int main(int argc, const char * argv[]) {
    // insert code here...
    std::cout << "Algorithm Numeric\n";
    
    std::vector<int> vec{10,20,30,40,50};
    
    /*
     type : Numeric operation
     accumulate : computes sum of elements in given           range
     
     File       : numeric
     */
    
    int sum_vec_element = std::accumulate(begin(vec),
                                          end(vec),
                                          0);
    std::cout<<std::endl<<"sum_vec_element "<<sum_vec_element
             <<std::endl;
    
    int product_vec_element = std::accumulate(begin(vec),
                                              end(vec),2,
                                              std::multiplies<int>());
    std::cout<<std::endl<<"product_vec_element"<<product_vec_element
            <<std::endl;
    
   /* std::vector<int> result_adj_diff;
    
    std::cout<<std::endl<<"printing adjacent difference"
            <<std::endl;
    
    std::adjacent_difference(begin(vec),
                             end(vec),
                             result_adj_diff.begin());
    
   
    
    for(auto &val:result_adj_diff)
    {
        std::cout<<std::endl<<val;
    }*/
    
    /*
     type : min/max operation
     minmax_element(first,last)
     file : algorithm
     return : pair of iterator 
     (first itr --> small element)
     (second itr --> large element)
     
     */
    
    auto [min,max]=std::minmax_element(begin(vec),end(vec));
    
    std::cout<<std::endl<<"Min element in vector "<< *min;
    std::cout<<std::endl<<"Max element in vector "<<*max<<std::endl;
    
    std::cout<<std::endl<<"---------------------------------------------";
    /*
     type : set operation
     file : algorithm.h
     
     set_union        -->  merges two set of elements by eliminating duplicates
     set_intersection -->  selects only matched or common elements between two sets
     set_difference   -->  select elements that are present in set1 & not present in set2
     set_symmetric_difference --> select element that are present in set1 & not present in set2
                            & also select element that are present in set2 & not present in set1
     
     first1, last1    -    the first input sorted range
     first2, last2    -    the second input sorted range
     d_first    -    the beginning of the output range
     
     */
    
    
    std::vector<int> v1,v2;
    v1 = {1, 2, 3, 4, 5};
    v2 = {3, 4, 5, 6, 7};
    
    std::cout<<std::endl<<" vector1 values "<<std::endl;
    for(auto val:v1){std::cout<<" "<<val;}
    
    std::cout<<std::endl<<" vector2 values "<<std::endl;
    for(auto val:v2){std::cout<<" "<<val;}
    
    std::vector<int> vec_union{},vec_intersection{},vec_difference{},vec_symmetric_difference{};
    
    std::set_union(begin(v1),end(v1),
                   begin(v2),end(v2),
                   std::back_inserter(vec_union));
    
    std::cout<<std::endl<<" vec_union values "<<std::endl;
    for(auto val:vec_union){std::cout<<" "<<val;}
    
    std::set_intersection(begin(v1),end(v1),
                        begin(v2),end(v2),
                        std::back_inserter(vec_intersection));
    std::cout<<std::endl<<" vec_intersection (matched) values "<<std::endl;
    for(auto val:vec_intersection){std::cout<<" "<<val;}
    
    
    
    std::set_difference(begin(v1),end(v1),
                        begin(v2),end(v2),
                        std::back_inserter(vec_difference));
    
    std::cout<<std::endl<<" vec_difference values "<<std::endl;
    for(auto val:vec_difference){std::cout<<" "<<val;}
    
    std::set_symmetric_difference(begin(v1),end(v1),
                                 begin(v2),end(v2),
                                 std::back_inserter(vec_symmetric_difference));
    
    std::cout<<std::endl<<" vec_symmetric_difference (mismatched) values "<<std::endl;
    for(auto val:vec_symmetric_difference){std::cout<<" "<<val;}
    
    std::cout<<std::endl;
    
    
    
    
    
    
    
    
    
    return 0;
}
